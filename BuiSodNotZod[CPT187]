package edu.cpt187.bui.exercise6;
//AUTHOR [Michelle Bui]
//COURSE CPT187
//PURPOSE [The purpose of program is to search through a file based on search criteria and generate price of an item.]
//STARTDATE [7/22/21]
import java.util.Scanner;

public class MainClass 
{
	//constants
	final static char[] MENU_CHARS = {'A','B','Q'};
	final static String[] MENU_OPTIONS = {"Login","Create an Account","Quit"};
	final static char[] FILE_MENU_CHARS = {'A','B','R'};
	final static String[] FILE_MENU_OPTIONS = {"Load Inventory","Create Order","Return to Main Menu"};
	final static char[] SUB_MENU_CHARS = {'A','B', 'C', 'D'};
	final static String INVENTORY_FILE_NAME = "MasterOrderFile.dat";
	final static String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	//main method begin
	public static void main(String[] args) 
	{
		//object and scanner
		Inventory currentInventory = new Inventory();
		Order currentOrder = new Order();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
		Scanner input = new Scanner(System.in); //scanner object
	
		//variables
		String userName = "";
		char menuSelection = ' ';
		
		//welcome banner 
		displayWelcomeBanner(); //display welcome banner
		
		menuSelection = validateMainMenu(input);//set menuSelection using validateMainMenu

		//while menuSelection not equal to 'Q',loop
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			userName = getUserName(input);//set variable userName using method getUserName

			//if menuSelection not equal to 'A',loop
			if(menuSelection != 'A')
			{
				currentUser.setSearchedIndex(userName);
				
				//if currentUser.getSearchedIndex() is greater than or equal to 0, loop
				if(currentUser.getSearchedIndex() >= 0)
				{
					displayAccountResults(userName);
				}//if currentUser.getSearchedIndex() is greater than or equal to 0, end
				
				//if currentUser.getSearchedIndex() is less than 0, loop
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					
					displayAccountResults(); 
				}//if currentUser.getSearchedIndex() is less than 0, end
			}//if menuSelection not equal to 'A',end
			
			//if menuSelection is equal to 'A',loop
			else
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				
				//if currentUser.getSearchedIndex() is less than 0 
				if (currentUser.getSearchedIndex() < 0)
				{
					displayLoginError(); 
				}//if currentUser.getSearchedIndex() is less than 0 
				
				//if currentUser.getSearchedIndex() is greater than 0, loop
				else
				{
					menuSelection = validateFileSelection(input);//set menuSelection using validateMainMenu
				
					//while menuSelection not equal to R, loop
					while(menuSelection != 'R')
					{
						//if menuSelection equals to A, loop 
						if(menuSelection == 'A')
						{
							currentInventory.setLoadItems(getFileName(input));
							
							//if currentInventory.getRecordCount() is less than or equal to 0, loop
							if (currentInventory.getRecordCount() <= 0)
							{
								displayFileError();
							}//if currentInventory.getRecordCount() is less than or equal to 0, end
							
							//if currentInventory.getRecordCount() is greater than 0, loop
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}//if currentInventory.getRecordCount() is greater than 0, end

						}//if menuSelection equals to A, end
						
						//if menuSelection is not equal to A, loop 
						else
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							
							//if currentInventory.getItemSearchedIndex() is less than 0, loop
							if(currentInventory.getItemSearchIndex() < 0)
							{
								displayNotFound();
							}//if currentInventory.getItemSearchedIndex() is less than 0, end 
							
							//if currentInventory.getItemSearchedIndex() is greater than 0, loop
							else
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setHowMany(validateHowMany(input));							
								
						
								//currentOrder.getInStockCount(currentInventory.getInStockCounts()) is less than currentOrder.getHowMany(), loop
								if(currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
								{
									displayOutOfStock();
								}//currentOrder.getInStockCount(currentInventory.getInStockCounts()) is less than currentOrder.getHowMany(), end
								
								//currentOrder.getInStockCount(currentInventory.getInStockCounts()) is greater than currentOrder.getHowMany(), loop
								else
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
								
									orders.setWriteOrder(currentOrder.getItemID(),currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
								
									//if currentOrder.getDiscountRate() is greater than 0.0, loop
									if(currentOrder.getDiscountRate() > 0.0)
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}//if currentOrder.getDiscountRate() is greater than 0.0, end
									
									//if currentOrder.getDiscountRate() is less than 0.0, loop
									else
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
	
									}//if currentOrder.getDiscountRate() is less than 0.0, end
								}//currentOrder.getInStockCount(currentInventory.getInStockCounts()) is less than currentOrder.getHowMany(), end
							}//if currentInventory.getItemSearchedIndex() is greater than 0, end
						}//if menuSelection is not equal to A, end
						
						menuSelection = validateFileSelection(input);//set menuSelection using validateMainMenu

					}//while menuSelection not equal to R, end
				}//if currentUser.getSearchedIndex() is greater than 0, end
			}//if menuSelection is equal to 'A', end
			
			menuSelection = validateMainMenu(input);//set menuSelection using validateMainMenu

		}//while menuSelection not equal to 'Q', end

		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		
		//if orders.getRecordCount() is greater than 0, start
		if(orders.getRecordCount() > 0)
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(),currentInventory.getGrandTotal());	
		}//if orders.getRecordCount() is greater than 0, end
		
		//farewell message 
		displayFarewellMessage();
		input.close();	
	}//main method end
	
	//void methods
	//displayWelcomeBanner method - this method displays the welcome banner
	public static void displayWelcomeBanner()
	{
		//display welcome banner
		System.out.println("~~~Order Items Program~~~");
		System.out.println("Welcome to the Order Items Program!");		
		System.out.println("Program generates items from files");
		System.out.println("And then prices them based on amount.");
		System.out.println("Please follow instructions when entering information");
	}//displayWelcomeBanner method end
	
	//displayMainMenu method - this method displays the main menu
	public static void displayMainMenu()
	{
		//display main menu
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");
		int localIndex = 0;
		while(localIndex < MENU_CHARS.length)//repetition structure to pass through MENU_CHARS array
		{
			System.out.printf("%-2s%5s%-12s\n", MENU_CHARS[localIndex], " for ", MENU_OPTIONS[localIndex]); //print menu option
			localIndex++;//increment localIndex
		}//repetition structure end
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayMainMenu method end
	
	//displayAccountResults message - this message displays the account results
	public static void displayAccountResults()
	{
		//display account results 
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayAccountResults message end

	//displayAccountResults message - this message displays the account results
	public static void displayAccountResults(String borrowedUserName)
	{
		//display account results message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.printf("%s%s%s\n", "Account not created: username, ", borrowedUserName, ", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayAccountResults message end

	//displayLoginError message - this message displays the login error
	public static void displayLoginError()
	{
		//display login error
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("LOGIN ERROR");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayLoginError message end

	//displayFileMenu method - this method displays the file menu
	public static void displayFileMenu()
	{
		//display file menu
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");
		int localIndex = 0;
		while(localIndex < FILE_MENU_CHARS.length)//repetition structure to pass through FILE_MENU_CHARS array
		{
			System.out.printf("%-2s%5s%-12s\n", FILE_MENU_CHARS[localIndex], " for ", FILE_MENU_OPTIONS[localIndex]); //print menu option
			localIndex++;//increment localIndex
		}//repetition structure end
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayFileMenu method end

	//displayFileError message - this message displays the file error
	public static void displayFileError()
	{
		//display file error
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayFileError message end

	//displayRecordReport message - this message displays the record report
	public static void displayRecordReport(int borrowedRecordCount)
	{
		//display record report message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%-3d%-17s\n", borrowedRecordCount, "records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayRecordReport message end

	//displayNotFound message - this message displays the not found 
	public static void displayNotFound()
	{
		//display not found error message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found.");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayNotFound message end

	//displayOutOfStock message - this message displays out of stock
	public static void displayOutOfStock()
	{
		//display out of stock message
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock.");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayOutOfStock message end

	//displayOrderReport method - this method displays the order report
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice,  double borrowedSubTotal,  double borrowedTaxRate,  double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-24s%-1s\n", "Customer Name: ", borrowedUserName);
		System.out.println("");
		System.out.printf("%-24s%-1s\n", "Item Name: ", borrowedItemName);
		System.out.printf("%-24s%-4s%4.2f\n", "Item Price: ", "$", borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-24s%-1s\n", "Discount Name: ", borrowedDiscountName);
		System.out.printf("%-24s%7s%4.2s\n", "Discount Rate: ", borrowedDiscountRate, "%");
		System.out.printf("%-24s%-4s%4.2f\n", "Discount Amount: ", "$", borrowedDiscountAmt);
		System.out.printf("%-24s%-4s%4.2f\n", "Discount Price: ", "$", borrowedDiscountPrice);
		System.out.println("");
		System.out.printf("%-24s%-1d\n", "Quantity: ", borrowedHowMany);
		System.out.println("");
		System.out.printf("%-24s%-3s%5.2f\n", "Subtotal: ", "$", borrowedSubTotal);
		System.out.printf("%-24s%9s%2.2s\n", "Tax Rate: ", borrowedTaxRate, "%");
		System.out.printf("%-24s%-3s%5.2f\n", "Tax Amount: ", "$", borrowedTaxAmt);
		System.out.println("");
		System.out.printf("%-24s%-3s%5.2f\n", "Order Total: ", "$", borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-24s%-1s\n", "Prize: ", borrowedPrizeName);
		System.out.println("");
		System.out.printf("%12s%2d%1s\n", "Buy more now: Only", borrowedInStockCount, " left in stock!");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayOrderReport method end
	
	//displayOrderReport method - this method displays the order report
	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal,  double borrowedTaxRate,  double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-24s%-1s\n", "Customer Name: ", borrowedUserName);
		System.out.println("");
		System.out.printf("%-24s%-1s\n", "Item Name: ", borrowedItemName);
		System.out.printf("%-24s%-4s%4.2f\n", "Item Price: ", "$", borrowedItemPrice);
		System.out.println("");
		System.out.printf("%-24s%-1d\n", "Quantity: ", borrowedHowMany);
		System.out.println("");
		System.out.printf("%-24s%-3s%5.2f\n", "Subtotal: ", "$", borrowedSubTotal);
		System.out.printf("%-24s%9s%2.2s\n", "Tax Rate: ", borrowedTaxRate, "%");
		System.out.printf("%-24s%-3s%5.2f\n", "Tax Amount: ", "$", borrowedTaxAmt);
		System.out.println("");
		System.out.printf("%-24s%-3s%5.2f\n", "Order Total: ", "$", borrowedTotalCost);
		System.out.println("");
		System.out.printf("%-24s%-1s\n", "Prize: ", borrowedPrizeName);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayOrderReport method end

	//displayFinalReport method - this method displays the final report
	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal) 
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.printf("%-2s\t%-15s\t%-6s\t%-3s\t%-5s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL");
		int localIndex = 0;
		while(localIndex < borrowedRecordCount)
		{
			System.out.printf("%-2d\t%-15s\t%-1s%5.2f\t%-3d\t%1s%5.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}
		System.out.println("");
		System.out.printf("%-11s\n", "GRAND TOTAL");
		System.out.printf("%-1s%10.2f\n", "$", borrowedGrandTotal);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayFinalReport method end
	
	//displayDiscountMenu method - this method displays the discount menu
	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		//display discount menu
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");
		int localIndex = 0;
		while(localIndex < borrowedDiscountNames.length)//repetition structure to pass through borrowedDiscountNames.length array
		{
			System.out.printf("%-2s%5s%-14s%5.2f%2s\n", SUB_MENU_CHARS[localIndex], " for ",borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex], "%") ; //print menu option
			localIndex++;//increment localIndex
		}//repetition structure end
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}//displayDiscountMenu method end
	
	//farewell message method - this method displays farewell message
	public static void displayFarewellMessage()
	{
		System.out.println("Thank you for using the Order Items Program!");
	}//farewell message method end
	
	//VR methods
	//validateMainMenu method - this method validates main menu choice
	public static char validateMainMenu(Scanner borrowedInput)
	{
		char localSelection = ' ';
		//display main menu
		displayMainMenu();
		System.out.print("Enter your selection here: ");
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//while localSelection is not equal A, B or Q, loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'Q')
		{
			//display error
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The selection made is invalid. Please try again.");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			//display Main Menu
			displayMainMenu();
			
			//input localSelection
			System.out.print("Enter your selection here: ");
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
			
		}//while localSelection is not equal A, B or Q, end
	
	return localSelection; 
	}//validateMainMenu method end
	
	//getUserName method - this method gets the user name
	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		System.out.print("Enter your username: ");
		localUserName = borrowedInput.next();
		return localUserName; 
	}//getUserName method end
	
	//getPassword method - this method gets the password
	public static String getPassword(Scanner borrowedInput)
	{
		String localPassword = "";
		System.out.print("Enter your password: ");
		localPassword = borrowedInput.next();
		return localPassword; 	
	}//getPassword method end

	//validateFileSelection method - this method validates file selection choice
	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		//display file menu
		displayFileMenu();
		System.out.print("Enter your selection here: ");
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//while localSelection is not equal A, B, R loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'R')
		{
			//display error
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The selection made is invalid. Please try again.");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			//display file Menu
			displayFileMenu();
			
			//input localSelection
			System.out.print("Enter your selection here: ");
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
			
		}//while localSelection is not equal A, B, R, end
	
	return localSelection; 
	}//validateFileSelection method end	

	//getFileName method - this method gets the file name 
	public static String getFileName(Scanner borrowedInput)
	{
		String localFileName = "";
		System.out.print("Enter the file name with extension (i.e. file.txt): ");
		localFileName = borrowedInput.next();
		return localFileName; 
	}//getFileName method end
		
	//validateSearchValue method - this method validates the search value
	public static int validateSearchValue(Scanner borrowedInput)
	{
		int localSearchValue = 0;
		
		System.out.print("Enter the search value: ");
		localSearchValue = borrowedInput.nextInt();

		//while localHowMany is less than 0, loop
		while (localSearchValue < 0)
		{
			//display error
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The selection made is invalid. Please try again.");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			
			//input localSelection
			System.out.print("Enter the search value: ");
			localSearchValue = borrowedInput.nextInt();			
		}//while localHowMany is less than 0, end 
	
	return localSearchValue; 
	}//validateSearchValue method end	
		
	//validateHowMany method - this method validates how many
	public static String validateHowMany(Scanner borrowedInput)
	{
		int localHowMany = 0;
		
		System.out.print("Enter the number you would like to order: ");
		localHowMany = borrowedInput.nextInt();

		//while localHowMany is less than or equal to 0, loop
		while (localHowMany <= 0)
		{
			//display error
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The selection made is invalid. Please try again.");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			
			//input localSelection
			System.out.print("Enter the number you would like to order: ");
			localHowMany = borrowedInput.nextInt();			
		}//while localHowMany is less than or equal to 0, end 
	
	return Integer.toString(localHowMany);
	}//validateHowMany method end	
	
	//validateDiscountMenu method - this method validates the number of copies 
	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		
		//display discount menu
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		
		System.out.print("Enter your selection here: ");
		localSelection = borrowedInput.next().toUpperCase().charAt(0);

		//while localSelection is not equal A, B, C, D loop
		while (localSelection != 'A' && localSelection != 'B' && localSelection != 'C' && localSelection != 'D')
		{
			//display error
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.println("The selection made is invalid. Please try again.");
			System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			//display discount Menu
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			
			//input localSelection
			System.out.print("Enter your selection here: ");
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
			
		}//while localSelection is not equal A, B, C, D, end
	
	return localSelection; 
	}//validateDiscountMenu method end	
}//end of methods
